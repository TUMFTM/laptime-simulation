# This .toml file is a copy of the 'user input' section of the original TUM
# simulation, just formatted to work with a .toml file input type
# https://toml.io/en/v1.0.0

# ------------------------------------------------------------------------------------------------------------------
# USER INPUT -------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------

# F1 qualifying mode:   DRS activated, EM strategy FCFB
# F1 race mode:         DRS as desired, EM strategy LBP
# FE qualifying mode:   DRS deactivated, EM strategy FCFB
# FE race mode:         DRS deactivated, EM strategy FCFB + lift&coast
# tracks must be unclosed, i.e. last point != first point!

# track options ----------------------------------------------------------------------------------------------------
# trackname:            track name of desired race track (file must be available in the input folder)
#                       eLemons values:
#                       trackname = "HighPlainsFullTrack"
#                       trackname = "Gingerman"
#                       trackname = "CarolinaMotorsportsPark"
#                       trackname = "Sonoma"
# flip_track:           switch to flip track direction if required
# mu_weather:           [-] factor to consider wet track, e.g. by mu_weather = 0.6
# interp_stepsize_des:  [m], desired stepsize after interpolation of the input raceline points
# curv_filt_width:      [m] window width of moving average filter -> set None for deactivation
# use_drs1:             DRS zone 1 switch
# use_drs2:             DRS zone 2 switch
# use_pit:              activate pit stop (requires _pit track file!)

[track_opts_]
    trackname = "HighPlainsFullTrack"
    flip_track = false
    mu_weather = 1.0
    interp_stepsize_des = 5.0
    curv_filt_width = 10.0
    use_drs1 = false
    use_drs2 = false
    use_pit = false

# solver options ---------------------------------------------------------------------------------------------------
# vehicle:                  vehicle parameter file
# series:                   F1, FE
# limit_braking_weak_side:  can be None, 'FA', 'RA', 'all' -> set if brake force potential should be determined
#                           based on the weak (i.e. inner) side of the car, e.g. when braking into a corner
# v_start:                  [m/s] velocity at start
# find_v_start:             determine the real velocity at start
# max_no_em_iters:          maximum number of iterations for EM recalculation
# es_diff_max:              [J] stop criterion -> maximum difference between two solver runs

[solver_opts_]
    vehicle = "FE_Berlin.ini"
    series = "FE"
    limit_braking_weak_side = "FA"
    v_start = 27.7
    find_v_start = true
    max_no_em_iters = 5
    es_diff_max = 1.0

# driver options ---------------------------------------------------------------------------------------------------
# vel_subtr_corner: [m/s] velocity subtracted from max. cornering vel. since drivers will not hit the maximum
#                   perfectly
# vel_lim_glob:     [m/s] velocity limit, set very high if unused, THIS IS DIFFERENT THAN THE ORIGINAL BEHAVIOR
# yellow_s1:        yellow flag in sector 1
# yellow_s2:        yellow flag in sector 2
# yellow_s3:        yellow flag in sector 3
# yellow_throttle:  throttle position in a yellow flag sector
# initial_energy:   [J] initial energy (F1: max. 4 MJ/lap, FE Berlin: 4.58 MJ/lap)
# em_strategy:      FCFB, LBP, LS, NONE -> FCFB = First Come First Boost, LBP = Longest (time) to Breakpoint,
#                   LS = Lowest Speed, FE requires FCFB as it only drives in electric mode!
# use_recuperation: set if recuperation by e-motor and electric turbocharger is allowed or not (lift&coast is
#                   currently only considered with FCFB)
# use_lift_coast:   switch to turn lift and coast on/off
# lift_coast_dist:  [m] lift and coast before braking point

[driver_opts_]
    vel_subtr_corner = 0.5
    vel_lim_glob = 1000
    yellow_s1 = false
    yellow_s2 = false
    yellow_s3 = false
    yellow_throttle = 0.3
    initial_energy = 4.58e6
    em_strategy = "FCFB"
    use_recuperation = false
    use_lift_coast = false
    lift_coast_dist = 10.0

# race characteristics --------------------------------------------------------------------------------------------
# gwc_times: [m] list, minutes the track is hot on each race day "gwc" stands for green-white-chequered for the flag pattern
#                  used to signal the beginning and end of the race.
#                  For each race day in an event put the number of minutes each day into the list, a race that is 9am to 5pm 
#                  for 2 days would be [540, 540] 

[race_characteristics_]
    gwc_times = [360, 360]

# sensitivity analysis options -------------------------------------------------------------------------------------
# use_sa:   switch to deactivate sensitivity analysis
# sa_type:  'elemons_mass', 'elemons_mass_cd', 'elemons_mass_cd_torque'
# range layout:  range of parameter variation [start, end, number of steps]
# range names: mass, c_d, torque
# RMH Note:
#  sa_type                  Range 1 variable     Range 2 variable               Range 3
# 'elemons_mass'            vehicle mass         not used - set to 'None' without quotes 
# 'elemons_mass_cd'         vehicle mass         Cd c_w_a (coefficient of drag)
# 'elemons_mass_cd_torque'  vehicle mass         Cd c_w_a (coefficient of drag) torque_e_motor_max 
# to set which ranges are used in the simulation set the 'sa_type' variable according
# to the value in the table directly above. You can leave the ranges in this file that are unused
[sa_opts_]
    use_sa = true
    sa_type = "elemons"


# debug options ----------------------------------------------------------------------------------------------------
# use_plot:                 plot results
# use_debug_plots:          plot additional plots for debugging
# use_plot_comparison_tph:  calculate velocity profile with TPH FB solver and plot a comparison
# use_print:                set if prints to console should be used or not (does not suppress hints/warnings)
# use_print_result:         set if result should be printed to console or not
# use_elemons_result:       set if eLemons result should be printed (added) to csv file or not

[debug_opts_]
    use_plot = false
    use_debug_plots = false
    use_plot_comparison_tph = false
    use_print = false
    use_print_result = true
    use_elemons_result = true

# car property options -----------------------------------------
# The values here are reperesentative of the car model defined in the following
# references and are used in the race_car_model.py file:
# https://docs.google.com/presentation/d/1Fe2ebMumncOxJ_XGSEA_o8PTu6qjORcLRfJFTbei6lo/edit#slide=id.p
# https://docs.google.com/document/d/1X2Aovz6VcKqkIUcsu5Z-QPbyDjBc7IG8CdWpZJr58eI/edit#


# INDEPENDENT VARIABLES
# Independent Variables can either be a single float value or a 
# list of 3 float values which represent a range of values to iterate over
# format [min_value, max_value, number_of_steps]

# battery_size:         battery size in kWh
# motor_max_torque:     maximum continuous motor torque in Nm
# gross_vehicle_weight: vehicle weight from factory in kg
# weight_reduction:     weight reduced from removing unnecessary car components in kg
# coefficient_of_drag:  coefficient of drag of car (unitless)]

# RELATIONSHIP VARIABLES
# Relationship variables must be a single float value and represent
# relationships between different car properties
# battery_mass_pit_factor:          how long to pit per kg of battery (minutes/kg)
# battery_energy_density:           energy density of battery kWh/kg
# motor_constant:                   motor constant of motor Nm/sqrt(W)
# motor_torque_density:             torque per kilogram of motor (Nm/kg)
# max_vehicle_weight_ratio:         rules based maximum weight of vehicle based on gvw (unitless)
# car_density:                      density of car (kg/m^3)
# chassis_battery_mass_factor:      ratio of supporting chassis mass per battery mass (kg/kg)
# chassis_motor_mass_factor:        ratio of supporting chassis mass per motor mass (kg/kg)
# rolling_resistance_mass_factor:   ratio of rolling resistance increase per kg of total vehicle mass (1/kg)

[car_properties_]
    [car_properties_.independent_variables]
        battery_size = [10.0, 100.0, 10.0]
        motor_max_torque = [100.0, 300.0, 10.0]
        gross_vehicle_weight = 1200
        weight_reduction = 200
        coefficient_of_drag = 0.3
    
    [car_properties_.relationship_variables]
        battery_energy_density = 0.5  # kWh/kg
        battery_mass_pit_factor = 0.01  # 5 minutes for 500kg battery
        motor_constant = 3
        motor_torque_density = 5
        max_vehicle_weight_ratio = 1.25  # determined by rules
        car_density = 100
        chassis_battery_mass_factor = 0.05
        chassis_motor_mass_factor = 0.05
        rolling_resistance_mass_factor = 0.00001 #0.01/1000
    
# vehicle parameters ----------------------------------------------------------------------------------------------------------------------
# Initial vehicle parameters to set, the data structure is what the simulation came with
# and is copied direcly from the FE_Berlin.ini file
# [VEH_PARS]

# powertrain_type:              electric, hybrid, combustion

# lf:                           [m] x distance front axle to center of gravity
# lr:                           [m] x distance rear axle to center of gravity
# h_cog:                        [m] height of center of gravity
# sf:                           [m] track width front
# sr:                           [m] track width rear
# m:                            [kg] vehicle mass inlcuding driver excluding fuel (FE minimum 880kg)
# f_roll:                       [-] rolling resistance coefficient
# c_w_a:                        [m^2] c_w * A_car -> air resistance calculation
# c_z_a_f:                      [m^2] c_z_f * A_frontwing
# c_z_a_r:                      [m^2] c_z_r * A_rearwing
# g:                            [m/s^2]
# rho_air:                      [kg/m^3] air density
# drs_factor:                   [-] part of reduction of air resistance by DRS

# topology:                     [-] RWD or AWD or FWD
# pow_e_motor:                  [W] total electric motor power (after efficiency losses)
# eta_e_motor:                  [-] efficiency electric motor (drive)
# eta_e_motor_re:               [-] efficiency electric motor (recuperation)
# torque_e_motor_max:           [Nm] maximum torque of electric motor (after efficiency losses)

# keep attention on the direction of the values, i.e. i_trans is from tire to engine!
# i_trans:                      [-] gear ratio
# n_shift:                      [1/min] shift rpm
# e_i:                          [-] torsional mass factor
# eta_g:                        [-] efficiency of gearbox/transmission

# tire data should be normalized to mu = 1.0 (coefficient of friction of the track / tire test bench)
# circ_ref:                     [m] loaded reference circumreference
# fz_0:                         [N] nominal tire load
# mux:                          [-] corresponds to the coefficient of friction at nominal tire load (fz == fz_0)
# muy:                          [-] corresponds to the coefficient of friction at nominal tire load (fz == fz_0)
# dmux_dfz:                     [-] reduction of force potential with rising tire load (fz > fz_0) -> negative value!
# dmuy_dfz:                     [-] reduction of force potential with rising tire load (fz > fz_0) -> negative value!
# tire_model_exp:               [-] exponent used in the tire model to adjust shape of friction "circle" -> [1.0, 2.0]

[veh_pars_]
    powertrain_type = "electric"
    
    [veh_pars_.general]
        lf = 1.906
        lr = 1.194
        h_cog = 0.345
        sf = 1.3
        sr = 1.3
        m = 880.0
        f_roll = 0.02
        c_w_a = 1.15
        c_z_a_f = 1.24
        c_z_a_r = 1.52
        g = 9.81
        rho_air = 1.18
        drs_factor = 0.0
    [veh_pars_.engine]
        topology = "RWD"
        pow_e_motor = 200e3
        eta_e_motor = 0.9
        eta_e_motor_re = 0.9
        torque_e_motor_max = 150.0
    [veh_pars_.gearbox]
        i_trans = [0.056, 0.091]
        n_shift = [19000.0, 19000.0]
        e_i = [1.04, 1.04]
        eta_g = 0.96
    [veh_pars_.tires]
        tire_model_exp = 2.0
        [veh_pars_.tires.f]
            circ_ref = 2.168
            fz_0 = 2500.0
            mux = 1.22
            muy = 1.22
            dmux_dfz = -2.5e-5
            dmuy_dfz = -2.5e-5
        [veh_pars_.tires.r]
            circ_ref = 2.168
            fz_0 = 2500.0
            mux = 1.42
            muy = 1.42
            dmux_dfz = -2.0e-5
            dmuy_dfz = -2.0e-5
